import sys, os
from lunarahelplib import LunaraHelpLib
lhl = LunaraHelpLib()
VERSION = "v0.0.01A"
CREDITS = [
    ["GachaYTB3", "Developer & Creator"]
]

def arun(filepath):
    with open(filepath, "r") as f:
        varnames, vartypes, varcontents = [], [], []
        allowedsymbols = ["a", "b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"]
        for line in f.read().split("\n"):
            if line.startswith("println(") and line.endswith(")"):
                toprint = line.removeprefix("println(").removesuffix(")")
                if toprint.startswith("'") and toprint.endswith("'"):
                    print(toprint.removeprefix("'").removesuffix("'"))
                elif toprint.startswith('"') and toprint.endswith('"'):
                    print(toprint.removeprefix('"').removesuffix('"'))
                elif toprint.startswith('"') and toprint.endswith("'"):
                    print("Error Code 000-0004\nWhat the hell, do you really create strings like that: \"'? You disgust me.")
                elif toprint.startswith("'") and toprint.endswith('"'):
                    print("Error Code 000-0004\nWhat the hell, do you really create strings like that: '\"? You disgust me.")
                elif toprint in varnames:
                    print(varcontents[varnames.index(toprint)])
            elif "->" in line:
                try:
                    int(line.split("->")[0].removesuffix(" "))
                    print("Error Code 000-0005\nVariable name cannot be an int.")
                    break
                except:
                    error = False
                    for char in line.split("->")[0].removesuffix(" "):
                        if char not in allowedsymbols:
                            print(f"Error Code 000-0005\nVariable name cannot contain the character {char}")
                            error = True
                    if error:break
                    varnames.append(line.split("->")[0].removesuffix(" "))
                    varcontent = line.split("->")[1].removeprefix(" ")
                    vartype = ""
                    if varcontent.startswith("'") and varcontent.endswith("'"):
                        varcontent = varcontent.removeprefix("'").removesuffix("'")
                        vartype = "str"
                    elif varcontent.startswith('"') and varcontent.endswith('"'):
                        varcontent = varcontent.removeprefix('"').removesuffix('"')
                        vartype = "str"
                    elif varcontent.startswith('"') and varcontent.endswith("'"):
                        error = True
                        print("Error Code 000-0004\nWhat the hell, do you really create strings like that: \"'? You disgust me.")
                    elif varcontent.startswith("'") and varcontent.endswith('"'):
                        error = True
                        print("Error Code 000-0004\nWhat the hell, do you really create strings like that: '\"? You disgust me.")
                    elif lhl.isanint(varcontent):
                        vartype = "int"
                        varcontent = int(varcontent)
                    else:
                        print("Error Code 000-0006")
                        print("Variable cannot contain anything other than a string, or an int.")
                        print("Possible Cause: You probably made a typo.")
                    if error:break
                    varcontents.append(varcontent)
                    vartypes.append(vartype)

def run(filepath):
    if os.path.exists("settings.lnst"):
        RunOnlyLNFiles = None
        for line in open("settings.lnst", "r").read().split("\n"):
            if line.startswith("RunOnlyLNFiles"):
                if line.removeprefix("RunOnlyLNFiles: ") == "Y":
                    RunOnlyLNFiles = True
                else:
                    RunOnlyLNFiles = False
        if os.path.exists(filepath):
            if (filepath.endswith(".ln") or filepath.endswith(".ln'") or filepath.endswith('.ln"')) and RunOnlyLNFiles:
                arun(filepath)
            elif not RunOnlyLNFiles:
                arun(filepath)
            else:
                print("Error Code 000-0003\nFile isn't a .ln file.")
        else:
            print("Error Code 000-0002\nFile doesn't exist.")
    else:
        print("Error Code 000-0001\nsettings.lnst file doesn't exist, did you run the setup.py script before using Lunara ?")

def main():
    # totally not generated by ai
    print(f"Lunara {VERSION} by GachaYTB3")
    if len(sys.argv) > 3:
        print("Usage: lunara <command> <filepath>")
        return
    
    command = sys.argv[1]
    if len(sys.argv) > 2:
        filename = sys.argv[2]

    if command == "run":
        if len(sys.argv) > 2:
            run(filename)
        else:
            # umm excuse me why the actual fuck did u only put 1 arg
            print("Error Code MM-000-0001\n2 arguments or more expected, found only 1")
    elif command == "help":
        print("Usage: lunara <command> [filename]")
        print("help: Shows this message")
        print("run: Runs a Lunara file")
        print("credits: Shows credits")
        print("version: Shows the version")
    elif command == "credits":
        print("Credits:")
        for item in CREDITS:
            print(f"{item[0]}: {item[1]}")
    elif command == "version":
        # well i basically just need to print nothing bcz it already prints the version when u run it
        pass
    else:
        print(f"Error Code MM-000-0002\nInvalid command. To get help with commands, run lunara help.")

if __name__ == "__main__":
    main()